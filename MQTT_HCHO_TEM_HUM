#include <ESP8266WiFi.h>
#include <PubSubClient.h>
#include <SoftwareSerial.h>
// ============ WiFi connection info ============
// WiFi SSID and password
const char* ssid = "your 2.4G Hz wifi SSID";
const char* password = "your password";

// IOT platform info
const char* mqtt_server = "your mqttserver";
const int mqtt_port = ;
const char* mqtt_client_id = "your clientid";
const char* mqtt_username = "your username";
const char* mqtt_password = "your password";

// IOT topic
const char* publish_topic = "your topic";

// ============ ZE08-C2HO UART config ============
#define SENSOR_RX D5  // RXD
#define SENSOR_TX D6  // TXD

SoftwareSerial sensorSerial(SENSOR_RX, SENSOR_TX); // RX, TX
WiFiClient espClient;
PubSubClient client(espClient);

// Function prototypes
void reconnect();
void sendSensorData();

// ============ initialize ============
void setup() 
{
  Serial.begin(115200);
  sensorSerial.begin(9600);

  WiFi.begin(ssid, password);
  Serial.print("connecting to  WiFi");

  while (WiFi.status() != WL_CONNECTED) 
  {
    delay(500);
    Serial.print(".");
    delay(5000);
    break;//Êñ∞Â¢û
  }

  Serial.println("\n‚úÖ WiFi connected");
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP());

  client.setServer(mqtt_server, mqtt_port);
}

// ============ loop ============
void loop()
{
  if (!client.connected())
   {
    reconnect();
   }

    client.loop();
  static unsigned long lastSend = 0;

  if (millis() - lastSend > 5000)
   {
    lastSend = millis();
    sendSensorData(); // refreshing every 5S
  }
}

// ============ reconnect MQTT ============
void reconnect() 
{
  while (!client.connected()) 
  {
    Serial.print("attempting connecting to MQTT...");
    if (client.connect(mqtt_client_id, mqtt_username, mqtt_password)) 
    {
      Serial.println("‚úÖ MQTT connecting successed");
    } 
    else {
      Serial.print("‚ùå failedÔºårc=");
      Serial.println(client.state());
      delay(3000);
      break;//Êñ∞Â¢û
    }
  }
}

// ============ upload C2HO DATA ============
void sendSensorData()
 {
  uint8_t buffer[9];

  // clear buffer
  while (sensorSerial.available()) sensorSerial.read();

  int index = 0;
  unsigned long start = millis();
  while (index < 9 && millis() - start < 1000)
   {
    if (sensorSerial.available())
     {
      buffer[index++] = sensorSerial.read();
    }
  }

  if (index == 9 && buffer[0] == 0xFF) 
  {
    uint8_t checksum = ~(buffer[1] + buffer[2] + buffer[3] + buffer[4] + buffer[5] + buffer[6] + buffer[7]) + 1;
    if (checksum == buffer[8]) 
    {
      uint16_t concentration = (buffer[4] << 8) | buffer[5]; 
     //Formaldehyde concentration
      float mg = concentration / 1000.0;
      Serial.print("üå´Ô∏è C2HO  concentration: ");
      Serial.print(mg);
      Serial.println(" mg/m¬≥");

      //  JSON DATA
      String payload = "{\"id\":\"1\",\"version\":\"1.0\",\"params\":{\"HCHO\":" + String(mg, 3) + "},\"method\":\"thing.event.property.post\"}";

        if (client.publish(publish_topic, payload.c_str()))
        {
          Serial.println("üì° Upload to IOT Platform");
        } 

        else
        {
          Serial.println("‚ùå DATA upload success");
        }
    }
     else 
     {
      Serial.println("‚ùå The verification fails, and the data is discarded");
    }
  } 
  else 
  {
    Serial.println("‚ùå Receive timeout or format error");
  }
}
